// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package wallet is a generated GoMock package.
package wallet

import (
	transaction "p-system/repositories/transaction"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 *Wallet) (*Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0)
}

// CreditWallet mocks base method.
func (m *MockRepository) CreditWallet(arg0 *Wallet, arg1 transaction.Transaction, arg2 int64) (*Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditWallet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreditWallet indicates an expected call of CreditWallet.
func (mr *MockRepositoryMockRecorder) CreditWallet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditWallet", reflect.TypeOf((*MockRepository)(nil).CreditWallet), arg0, arg1, arg2)
}

// DebitWallet mocks base method.
func (m *MockRepository) DebitWallet(arg0 *Wallet, arg1 transaction.Transaction, arg2 int64) (*Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitWallet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitWallet indicates an expected call of DebitWallet.
func (mr *MockRepositoryMockRecorder) DebitWallet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitWallet", reflect.TypeOf((*MockRepository)(nil).DebitWallet), arg0, arg1, arg2)
}

// GetWalletByUserID mocks base method.
func (m *MockRepository) GetWalletByUserID(arg0 string) (*Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserID", arg0)
	ret0, _ := ret[0].(*Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserID indicates an expected call of GetWalletByUserID.
func (mr *MockRepositoryMockRecorder) GetWalletByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserID", reflect.TypeOf((*MockRepository)(nil).GetWalletByUserID), arg0)
}
